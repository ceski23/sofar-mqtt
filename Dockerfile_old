#################
##### Arguments
ARG APP=sofar-mqtt
ARG TARGET=aarch64-unknown-linux-gnu

################
##### Builder
FROM rust:1.69.0 as builder
ARG APP
ARG TARGET
ENV PKG_CONFIG_ALLOW_CROSS=1

ENV CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
ENV CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
ENV CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++

## Install dependencies
RUN apt update
RUN apt install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross

## Install target platform (Cross-Compilation) --> Needed for AlpineA
RUN rustup target add $TARGET
# RUN rustup toolchain install stable-$TARGET

WORKDIR /usr/src

# Create blank project
RUN USER=root cargo new $APP

# We want dependencies cached, so copy those first.
COPY Cargo.toml Cargo.lock /usr/src/$APP/

# Set the working directory
WORKDIR /usr/src/$APP

# This is a dummy build to get the dependencies cached.
RUN cargo build --target $TARGET --release

# Now copy in the rest of the sources
COPY src /usr/src/$APP/src/

## Touch main.rs to prevent cached release build
RUN touch /usr/src/$APP/src/main.rs

# This is the actual application build.
RUN cargo build --target $TARGET --release

################
##### Runtime
FROM debian:bullseye-slim AS runtime 
ARG APP
ARG TARGET
ENV APP ${APP}

# Copy application binary from builder image
COPY --from=builder /usr/src/$APP/target/$TARGET/release/$APP /usr/local/bin
# RUN mv /usr/local/bin/$APP /usr/local/bin/$APP

EXPOSE 8080

# Run the application
CMD /usr/local/bin/${APP}